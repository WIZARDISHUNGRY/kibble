#	$OpenBSD: pf.conf,v 1.55 2017/12/03 20:40:04 sthen Exp $
#
# See pf.conf(5) and /etc/examples/pf.conf

set skip on lo

egress_if = vether2
border_if = vlan2
capped_if = vlan0
guest_if = vether1
netblock = "10.70.145.0/24"
trusted = "10.70.145.1 - 10.70.145.63"
dmz = "10.70.145.1 - 10.70.145.23"
infrastructure = "10.70.145.24 - 10.70.145.39"
harden = "10.70.145.8 - 10.70.145.23"
mz = "10.70.145.24 - 10.70.145.63"
untrusted = "10.70.145.224/27"
vms = "10.70.145.192/27"
world_ip = "199.167.59.73"
us2 =  $world_ip 
badports = "{ kerberos-sec, vnc, bootps, bootpc, netbios-ns, epmap, netbios-dgm, netbios-ssn, snmp, snmp-trap, microsoft-ds, dhcpv6-client, dhcpv6-server, afpovertcp, mdns, mdnsresponder, syslog }"

set loginterface $border_if

# simple captive portal without a weird SUID script
table <guests> persist 

# workaround "2018/08/02 - Error on invalid queue definitions in pf.conf(5)"
queue rootq on $border_if bandwidth 65M max 65M
  queue std parent rootq bandwidth 15M flows 256 qlimit 256 default
  queue http parent rootq bandwidth 15M burst 55M for 200ms flows 256 qlimit 256
  queue ssh parent rootq bandwidth 20M 
    queue ssh_interactive parent ssh bandwidth 10M min 5M flows 50
    queue ssh_bulk parent ssh bandwidth 10M flows 256
  queue low parent rootq bandwidth 5M
    queue bulk parent low bandwidth 10K flows 512 qlimit 1024
    queue untrusted parent low bandwidth 2M max 5M burst 20M for 200ms flows 50 qlimit 50

queue capped on $capped_if bandwidth 5M max 100M
  queue untrusted parent capped bandwidth 5M max 5M burst 100M for 200ms flows 50 qlimit 50 default

match inet from 10.70.145.31 to {!(lan:network), !(egress) } \
  tag BULK
match inet from {!(lan:network), !(egress) } to 10.70.145.31 \
  tag BULK
match proto tcp from 10.70.145.31 port = 32400 to {!(lan:network), !(egress) } tag PLEX set queue std
match proto tcp from {!(lan:network), !(egress) } to 10.70.145.31 port = 32400 tag PLEX set queue std
match from $untrusted to any \
  tag UNTRUSTED
match from any to $untrusted \
  tag UNTRUSTED

match out inet proto tcp from any to any port {80, 443} \
  set queue http
match inet proto tcp from any to any port 22 \
  set queue(ssh_bulk, ssh_interactive) 
match inet proto tcp from any to any port 5900:5910 \
  set queue(ssh_interactive) # vnc
match inet proto udp from any to any port 60000:61000 \
  set queue(ssh_interactive) # mosh 
match tagged UNTRUSTED \
  set queue(untrusted) 

pass		# establish keep-state

# Old NAT
#pass out on $egress_if inet from (trusted:network) to !(egress) nat-to ($egress_if:0)
#pass out on $egress_if inet from (trusted:network) to !(egress) nat-to 10.70.130.139
#pass out on $egress_if inet from (trusted:network) to 192.168.1.0/24  nat-to 192.168.1.2
#pass out on urtwn0 inet from (trusted:network) to !$netblock nat-to (urtwn0)

pass quick on trusted from $trusted to $trusted no state
pass out on egress proto tcp from $netblock to !$netblock modulate state
#block return in on egress from any to { $mz, $untrusted }
#block return in on $guest_if from $untrusted to $mz
pass in on egress proto udp from any to 10.70.145.31
# TODO vms need to have their dhcp filtered by MAC
block return in from $vms to $mz
block return in on egress proto { tcp, udp } from any to $harden port $badports

# miniupnpd - rememeber to hardcode http port in config
# root     miniupnpd  47986    4* internet stream tcp 0x0 *:9660
# root     miniupnpd  47986    5* internet dgram udp *:1900
block return in on egress proto { tcp, udp } from any to any port { 1900, 9660 } 

# Captive Portal
pass in on $guest_if proto tcp from !<guests> to any port 80 keep state \
  rdr-to 127.0.0.1 port 80 
pass in on $guest_if proto tcp from !<guests> to $world_ip port 80 keep state \
  rdr-to 127.0.0.1 port 80 
pass in on $guest_if proto tcp from !<guests> to $world_ip port 443 keep state \
  (max-src-conn 1, overload <guests> flush) \
  rdr-to 127.0.0.1 port 443
pass in on $guest_if proto tcp from <guests> to any port 80 keep state

# Let remote "what is my ip" services see our static IP 
# ip is discovery.bongo.zone (don't want to trigger name resolution)
# added udp to see if we can mess with torrent trackers
pass out on egress proto tcp from 10.70.145.31 to !(egress) port { 80, 443 } nat-to ($egress_if:0)
#pass on egress proto udp from 10.70.145.31 to !(egress) port { 80, 443 } binat-to ($egress_if:0)
# TODO Transmission remote, etc.

# Allow Syslog to/from infrastructure
block drop in on ! lo0 proto udp from any to { $world_ip, $netblock } port syslog
pass in on trusted proto udp from { $dmz, $infrastructure, $vms } to any port syslog

# By default, do not permit remote connections to X11
block return in on ! lo0 proto tcp to port 6000:6010

# Port build user does not need network
block return out log proto {tcp udp} user _pbuild

table <sshguard> persist
block drop in quick on egress from <sshguard>
# TODO ssh tarpit experiment

# miniupnpd rules are "pass quick" so we wait till after the bulk queue to flag other traffic as bulk
pass in quick on vether2 proto tcp from any to $world_ip port = 32400 \
  label "static plex" rdr-to 10.70.145.31 port 32400 
anchor miniupnpd

match tagged miniupnpd \
  set queue(bulk)
match tagged BULK \
  set queue(bulk)

# this breaks upnp and doesnt work because we have bridged ifs
#antispoof for { vether0, vether1, vether2 }

#block drop in on egress inet from { $netblock, $world_ip } to any 
# TODO sanitize guest network?

# try to stop hostile dhcp servers as much as possible FIXME this doesn't work right now
#block drop in log on { !vether1, !vether2 } inet proto udp from any port { bootpc, dhcpv6-server} to any 

block out on docker-jon proto tcp from any to any port 22
pass out on docker-jon proto tcp user jon

# IPv6

pass out quick on egress inet6 modulate state
pass in quick proto icmp6 all
