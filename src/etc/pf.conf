#	$OpenBSD: pf.conf,v 1.55 2017/12/03 20:40:04 sthen Exp $
#
# See pf.conf(5) and /etc/examples/pf.conf

set skip on lo

egress_if = vether2
border_if = vlan2
capped_if = vlan0
guest_if = vether1
netblock = "10.70.145.0/24"
trusted = "10.70.145.1 - 10.70.145.63"
dmz = "10.70.145.1 - 10.70.145.23"
infrastructure = "10.70.145.24 - 10.70.145.39"
harden = "10.70.145.8 - 10.70.145.23"
mz = "10.70.145.24 - 10.70.145.63"
untrusted = "10.70.145.224/27"
vms = "10.70.145.192/27"
world_ip = "199.167.59.73"
us2 =  $world_ip 
badports = "{ kerberos-sec, vnc, bootps, bootpc, netbios-ns, epmap, netbios-dgm, netbios-ssn, snmp, snmp-trap, microsoft-ds, dhcpv6-client, dhcpv6-server, afpovertcp, mdns, mdnsresponder, syslog }"
mediaserver = "10.70.145.25" # jansky

# host plex.tv | grep addr|cut -f 4 -d ' ' | xargs
# host portcheck.transmissionbt.com 
#whatismyip = "{ 87.98.162.88, 54.76.102.118, 52.30.248.117, 54.246.140.185, 54.154.115.144, 52.16.193.193, 54.72.69.247, 54.77.150.142, 63.32.153.75, 63.32.24.1 }"
whatismyip = "{ 54.171.147.115, 54.154.198.3, 54.76.255.232, 52.18.254.79, 52.16.101.236, 54.171.5.253, 52.31.211.151, 63.32.177.143 }"

set loginterface $border_if

# simple captive portal without a weird SUID script
table <guests> persist 

# workaround "2018/08/02 - Error on invalid queue definitions in pf.conf(5)"
queue rootq on $border_if bandwidth 65M max 65M
  queue std parent rootq bandwidth 15M flows 256 qlimit 256 default
  queue http parent rootq bandwidth 15M burst 55M for 200ms flows 256 qlimit 256
  queue ssh parent rootq bandwidth 20M 
    queue ssh_interactive parent ssh bandwidth 10M min 5M flows 50
    queue ssh_bulk parent ssh bandwidth 10M flows 256
  queue low parent rootq bandwidth 5M
    queue bulk parent low bandwidth 10K flows 512 qlimit 1024
    queue untrusted parent low bandwidth 2M max 5M burst 20M for 200ms flows 50 qlimit 50

queue capped on $capped_if bandwidth 5M max 100M
  queue untrusted parent capped bandwidth 5M max 5M burst 100M for 200ms flows 50 qlimit 50 default

#match inet from $medeiaserver to {!(lan:network), !(egress) } \
#  tag BULK
#match inet from {!(lan:network), !(egress) } to $mediaserver \
#  tag BULK
match proto tcp from $mediaserver port = 32400 to {!(lan:network), !(egress) } tag PLEX set queue std
match proto tcp from {!(lan:network), !(egress) } to $mediaserver port = 32400 tag PLEX set queue std
match from $untrusted to any \
  tag UNTRUSTED
match from any to $untrusted \
  tag UNTRUSTED

match out inet proto tcp from any to any port {80, 443} \
  set queue http
match inet proto tcp from any to any port 22 \
  set queue(ssh_bulk, ssh_interactive) 
match inet proto tcp from any to any port 5900:5910 \
  set queue(ssh_interactive) # vnc
match inet proto udp from any to any port 60000:61000 \
  set queue(ssh_interactive) # mosh 
match tagged UNTRUSTED \
  set queue(untrusted) 

pass		# establish keep-state

# Old NAT
pass out on $egress_if inet from any to any nat-to ($egress_if:0)
#pass out on $egress_if inet from (trusted:network) to !(egress) nat-to 10.70.130.139
#pass out on $egress_if inet from (trusted:network) to 192.168.1.0/24  nat-to 192.168.1.2
#pass out on urtwn0 inet from (trusted:network) to !$netblock nat-to (urtwn0)

