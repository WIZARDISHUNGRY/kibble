#	$OpenBSD: pf.conf,v 1.55 2017/12/03 20:40:04 sthen Exp $
#
# See pf.conf(5) and /etc/examples/pf.conf

set skip on lo

egress_if = vether2
capped_if = vlan0
guest_if = vether1
netblock =  "10.70.145.0/24"
trusted = "10.70.145.0 - 10.70.145.63"
dmz = "10.70.145.0 - 10.70.145.23"
harden = "10.70.145.8 - 10.70.145.23"
mz = "10.70.145.24 - 10.70.145.63"
untrusted = "10.70.145.224/27"
world_ip = "199.167.59.73"
badports = "{ kerberos-sec, vnc, bootps, bootpc, netbios-ns, netbios-dgm, netbios-ssn, snmp, snmp-trap, microsoft-ds, dhcpv6-client, dhcpv6-server, afpovertcp, mdns, mdnsresponder }"

set loginterface $egress_if

# simple captive portal without a weird SUID script
table <guests> persist 

# workaround "2018/08/02 - Error on invalid queue definitions in pf.conf(5)"
queue rootq on $egress_if bandwidth 65M max 65M
  queue std parent rootq bandwidth 15M flows 256 qlimit 256 default
  queue http parent rootq bandwidth 15M burst 55M for 200ms flows 256 qlimit 256
  queue ssh parent rootq bandwidth 20M 
    queue ssh_interactive parent ssh bandwidth 10M min 5M flows 50
    queue ssh_bulk parent ssh bandwidth 10M flows 256
  queue low parent rootq bandwidth 5M
    queue bulk parent low bandwidth 3M flows 512 qlimit 1024
    queue untrusted parent low bandwidth 2M max 5M burst 20M for 200ms flows 50 qlimit 50

queue capped on $capped_if bandwidth 5M max 100M
  queue untrusted parent capped bandwidth 5M max 5M burst 100M for 200ms flows 50 qlimit 50 default

match in on bulk inet from any to {!(lan:network), !(egress) } \
  tag BULK
match from $untrusted to any \
  tag UNTRUSTED
match from any to $untrusted \
  tag UNTRUSTED

match out inet proto tcp from any to any port {80, 443} \
  set queue http
match inet proto tcp from any to any port 22 \
  set queue(ssh_bulk, ssh_interactive) 
match tagged BULK \
  set queue(bulk)
match tagged UNTRUSTED \
  set queue(untrusted) 

pass		# establish keep-state

# Old NAT
#pass out on $egress_if inet from (trusted:network) to !(egress) nat-to ($egress_if:0)
#pass out on $egress_if inet from (trusted:network) to !(egress) nat-to 10.70.130.139
#pass out on $egress_if inet from (trusted:network) to 192.168.1.0/24  nat-to 192.168.1.2
#pass out on urtwn0 inet from (trusted:network) to !$netblock nat-to (urtwn0)

pass quick on trusted from $trusted to $trusted no state
pass out on egress proto tcp from $netblock to !$netblock modulate state
block return in on egress from any to { $mz, $untrusted }
block return in on $guest_if from $untrusted to $mz
block return in on egress proto { tcp, udp } from any to $harden port $badports

# Captive Portal
pass in on $guest_if proto tcp from !<guests> to any port 80 keep state \
  rdr-to 127.0.0.1 port 80 
pass in on $guest_if proto tcp from !<guests> to $world_ip port 80 keep state \
  (max-src-conn 1, overload <guests> flush) \
  rdr-to 127.0.0.1 port 80 
pass in on $guest_if proto tcp from <guests> to any port 80 keep state

# Let remote "what is my ip" services see our static IP 
# ip is discovery.bongo.zone (don't want to trigger name resolution)
pass out on egress proto tcp from 10.70.145.31 to !(egress) port { 80, 443 } nat-to ($egress_if:0)
# TODO Transmission remote

# By default, do not permit remote connections to X11
block return in on ! lo0 proto tcp to port 6000:6010

# Port build user does not need network
block return out log proto {tcp udp} user _pbuild

anchor miniupnpd

# this breaks upnp and doesnt work because we have bridged ifs
#antispoof for { vether0, vether1, vether2 }

block drop in on egress inet from { $netblock, $world_ip } to any 
# TODO sanitize guest network?

block drop in log on { !vether1, !vether2 } inet proto udp from any port { bootpc, dhcpv6-server} to any 
